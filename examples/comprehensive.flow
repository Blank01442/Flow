# Comprehensive Example
# This example demonstrates FFI, concurrency, and functional programming features

print "=== Comprehensive Flow Features Example ==="

# Functional Programming Example
print "\n--- Functional Programming ---"

# Create a list of numbers
let numbers = [1, 2, 3, 4, 5]
print "Original numbers:", numbers

# Define functions
func square(x) {
    return x * x
}

func is_even(x) {
    return x == 2 or x == 4
}

func add(acc, x) {
    return acc + x
}

# Map example - square each number
let squares = map(square, numbers)
print "Squared numbers:", squares

# Filter example - keep only even numbers
let evens = filter(is_even, numbers)
print "Even numbers:", evens

# Reduce example - sum all numbers
let sum = reduce(add, numbers, 0)
print "Sum of numbers:", sum

# Concurrency Example
print "\n--- Concurrency ---"

# Async function example
async func fetch_data(url) {
    # Simulate async operation
    print "Fetching data from", url
    return "Data from " + url
}

# Await example
let data = await fetch_data("https://api.example.com")
print "Got data:", data

# FFI Example
print "\n--- FFI ---"

# Show available FFI functions
print "FFI functions available:"
print "  ffi_load(lib_path) - Load a shared library"
print "  ffi_register(lib_path, func_name, return_type, arg_types...) - Register function signature"
print "  ffi_call(lib_path, func_name, args...) - Call a function"

print "\nFlow language features are ready for use!"